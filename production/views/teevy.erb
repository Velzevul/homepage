<a href="/" id="homelink" class="homelink icon-house"></a>

<header class="l-row--large--project--teevy">
    <div class="l-wrap--full">
      <div class="target--left">
        <div class="target__hit--bottom">
          <h1>Teevy.co</h1>
          <p>TV-show tracking web application with user-friendly interface, under development.</p>
        </div>
      </div>
    </div>
</header>

<section class="l-row">
    <div class="l-wrap">
      <div class="grid">
        <div class="grid__item one--half">
          <h3>Responsibilities</h3>
          <p>Interaction design, <br>Full-stack development</p>
        </div><!--
        --><div class="grid__item one--half">
          <h3>Technologies used</h3>
          <p>Ruby on Rails, Rspec, HTML5, <br>SASS, SMACSS, OOCSS, BEM, <br>AngularJS, Heroku</p>
        </div>
      </div>
    </div>
</section>

<section class="l-row">
  <h2>Challenges</h2>

  <div class="separator">
    <i class="separator__icon icon-flag"></i>
  </div>

  <div class="l-wrap">
    <p>One of my goals for this project was to improve my style of writing SASS. Before I was sticking to the SMACSS convention of code structuring (which I really like), but I started to notice that in different modules I use the same layout patterns, which ideally would be abstracted out into separate entities.</p>
    <p>Another challenge was to maintain clear separation between different modules in order to reduce naming conflicts without increasing the depth of applicability of selectors.</p>
    <p>Apart from that I wanted to learn how to work with Grunt task runner to automize the most common tasks: compilation of SASS, running local server, and autoreload.</p>
  </div>
</section>

<section class="l-row">
  <h2>What did I learn</h2>

  <div class="separator">
    <i class="separator__icon icon-checkmark"></i>
  </div>

  <div class="l-wrap">
    <p>I discovered for myself the OOCSS paradigm, which among other things stated exactly what I needed - separation out abstract patterns to their own entities. In this project I tried to mix SMACSS code structuring and OOCSS abstraction level in order to increase reusability of my code. I also learnt how to use BEM naming convention to make clear separation between elements of nested modules. Also I discovered that Grunt is not as scary as it looked first and is super useful tool =)</p>
  </div>

  <div class="l-wrap is-center-aligned">
    <a href="https://github.com/Velzevul/teevy-frontend" class="button"><i class="button__icon icon-github"></i>Browse the code</a>
  </div>

  <div class="l-wrap is-center-aligned">
    <p>Next project: &nbsp;<a href="/project/studytube-cms">Studytube CMS</a></p>
  </div>
</section>

<footer class="l-wrap footer">
  &copy; Volodymyr Dziubak, 2014
</footer>